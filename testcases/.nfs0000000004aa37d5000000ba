delimiter = 60000000

implicitly = testing + an + argc + value + of + 11
print delimiter
testing = argc + use
print argc

print delimiter + 1
testing = compiler + variable + naming + system
main = 5
print main

print it
it = 5
print it

print exit

fmt = 10
print fmt

print delimiter + 2
testing = looping + and + f + unction + and + conditional + labels
print else0
print else1
print else2

print end0
print end1
print end2

print and0
print and1
print and2

print or0
print or1
print or2


print startloop0
print startloop1
print startloop2

print delimiter + 3
testing = sixty - four + bit + movement
hello = 18446744073709551610
hello = hello + 1
print hello
hello = hello + 18446744073709551610
print hello

print delimiter + 4
testing = argc + operations 

thatsCrazy = 5 + 7 * 8 / (5) + 1 - 1 + 10
thatsTuff = 5 * 30  / 10 % thatsCrazy + argc
print thatsTuff

hello = 0
while (hello < 100) {
    thatsCrazy = 5 + 5 + 5 + 5 + 5 - argc
    hello = hello + 1
}
print(thatsCrazy)

print delimiter + 5
testing = overflow
print (code - 100) / 2
code = (code - 5) / 2
print hello - 5
code = 18446744073709551615
code = code + 1
print code

print delimiter + 6
print testing + zero + operations
print 5 / 0
print 5 % 0
hello = 5 / (1 - 1)
print hello - 5

print delimiter + 7
print testing + self + assignment + math
code = (code * code - code ) / code
print code

print delimiter + 8
testing = if + statement + logic

if (hello < 0) 
    x = 5
else 
    if (hello)
        y = 5
        if hello != 1 
            y = 6
        else {
            y = 7
        }
        
print x
print y
x = 5

print delimiter + 9

testing = while + loop + logic
while (x > 0) {
    print x
    x = x - 1
}
while (y > 0) 
    y = y - 1
print x
print y



print delimiter + 10

fWord = is + the + working + term + for + the + expression + that + takes + an + input + and + produces + an + output
testing = fWord + with + and + without + curly + braces
dawg = fun print(0)
dog = fun {
    print 1 
    return 0
}
print dawg(0)
print dawg(1)
print dog(0)
print dog(1)

print delimiter + 11

testing = fWord + inside + another + fWord

whatAPersonality = 0
dawg = fun {
    while (it < 10)
        it = it + 1 + fun {whatAPersonality = whatAPersonality + 1}(whatAPersonality)
    print(it)
    return whatAPersonality
}

print dawg(0)
print dawg(5)
print dawg(10)

print delimiter + 12
testing = short + circuiting + logic + for + literals
print 0 && 1
print 1 || 0

print delimiter + 13
testing = short + circuiting + fWords
hello = 0
dawg = fun {
    hello = hello + it
    return it
}
print 0 && dawg(1)
print hello
print 1 || dawg(2)
print hello

print delimiter + 14

testing = commas
x = 2, 3, 4, 5
print x

print delimiter + 15
testing = commas + with + fWords

hello = dawg(100), dawg(1)
print hello
