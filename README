Due:
    test: 2/18/2024 @ 11:59pm
    code: 2/20/2024 @ 11:59pm

Objectives:
~~~~~~~~~~~

    - Become better at AArch64 assembly

Assignment:
~~~~~~~~~~~

    - Implement a fun to AArch64 compiler
    - Donate a test
    - Learn about cross compilers and emulators and how to use them
    - Answer the questions in REPORT.txt

The fun language is defined in p2 with one extension:

    - The global variable 'argc' contains the number of arguments passed to
      the compiled program.

      For example:
          make t0.arm   # produces the ARM executable corresponding to t0.fun
          qemu-aarch64 ./t0.arm a b  # argc will be set to 3

Mixing architectures:
~~~~~~~~~~~~~~~~~~~~~

This assignment involves:

(1) writing a simple-minded compiler (fun => aarch64 assembly)

    - written in C/C++
    - compiled on x86-64
    - runs on x86-64

(2) assembling the generated code using the aarch64 cross tools

    - runs on x86-64
    - accepts AArch64 assembly
    - produces AArch64 executable

(3) running the generated executable using qemu-aarach64

    - runs on x86-64
    - emulates aarch64

The Makefile automates all that but you need to understand how it does it

The aarch64 tools:
~~~~~~~~~~~~~~~~~~

Cross tool-chain (compilers, assembler, linker, objdump, ...):
   
    ~gheith/public/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu

QEMU (emulator):

    ~gheith/public/qemu_5.1.0_old/bin/qemu-aarch64


Important "make" targets:
~~~~~~~~~~~~~~~~~~~~~~~~~

The Makefile automates your tasks.

make                          # builds the compiler
make test                     # runs all tests
make t0.test                  # runs t0
make t0.s                     # generates the AArch64 assembly for t0.fun
make t0.arm                   # generates the AArch64 executable for t0.fun

Important files:
~~~~~~~~~~~~~~~~

*.cxx           compiler C++ files
*.c             compiler C files
*.h             compiler headers
build/funcc     the compiler (generated by running make)

t0.fun          fun program for t0
t0.ok           expected output for t0
t0.args         arguments to pass when running t0.arm

t0.s            the result of running "build/funcc t0.fun"
                should contain AArch64 assembly instructions
t0.arm          the AArch64 statically linked binary generated from t0.s

t0.out          the output you get when running t0.arm and giving the
                arguments in t0.args


How to add your test:
~~~~~~~~~~~~~~~~~~~~~

    To add your test, create 3 files:

       <your CSID>.fun     contains the fun program
       <your CSID>.args    contains the arguments to pass to <your CSID>.arm
       <your CSID>.ok      contains the expected output

    Don't forget to commit them to git (for example):

       git add <your CSID>.fun <your CSID>.ok <your CSID>.args
                                              # add the files
       git commit -a -m "added test"          # commit your change locally
       git push                               # push to server
    
Generated files:
~~~~~~~~~~~~~~~~

    for each test:

        <test>.out    output from running the test
        <test>.diff   differences between the actual and expected output
        <test>.result pass/fail

To get notifications (will be sent to <your csid>@cs.utexas.edu):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add an empty file named "spamon" in your project directory. Don't forget
to "git add", "git commit", "git push"

To run tests:
~~~~~~~~~~~~~

    make test

To make the output less noisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    make -s test

To run one test
~~~~~~~~~~~~~~~

    make -s t0.test

To run by hand
~~~~~~~~~~~~~~

    make
    ./build/funcc t0.fun
    qemu-aarch64 ./t0.arm x y z

